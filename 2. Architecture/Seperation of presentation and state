# Separation of presentation and state in Shopify Liquid themes

The separation between the presentation layer and the state layer in a Shopify theme can be understood as a clear distinction between **what is displayed** (presentation) and **how it’s configured or managed** (state). This separation is crucial for maintaining a clean, modular architecture where each part of the theme has a well-defined role.

## Presentation Layer

Controlled by Components (Snippets and Assets(CSS,JS))

**Components** in a Shopify theme, primarily composed of Liquid snippets and associated assets (CSS, JS, images, etc.), are responsible for rendering the actual content and user interface of the site. They handle the **presentation layer**, which includes:
1. **HTML Markup:** The structure and layout of the content, defined by Liquid snippets
2. Liquid Logic: Manipulating and use state to output the appropriate HTML
3. **Styling (CSS):** The visual design and aesthetics, managed by CSS files linked to or embedded within snippets.
4. **Interactivity (JS):** Client-side behaviors, such as animations or dynamic content updates, managed by JavaScript assets.

**Role of the Presentation Layer:**
- The presentation layer is concerned solely with how the content looks and behaves on the user interface.
- It does not hold or manage the data; instead, it receives data (state) from the state layer and renders it accordingly.
- The focus is on encapsulation, ensuring that each component (snippet) is self-contained and responsible for its part of the UI.

## State Layer 

Controlled by the Store (Products, Navigations, Metafields, etc.) and Theme (Layouts, Templates, Sections, Locales, Config Files)

The **state layer** in a Shopify theme includes all the files and settings that control and direct how data is managed, configured, and passed to the presentation layer. This layer includes:
1. **Layouts:** Define the overall structure of the page, often wrapping the content generated by templates and sections. They manage the global structure, such as including the header and footer across all pages. It controls what are the top-level component(s) to be used and any top-level state that needs to be defined.
2. **Templates and Section Groups:** Determine what type of content and which sections/snippets will be rendered for different pages (e.g., product pages, collection pages). Templates control the selection and assembly of components.
3. **Sections:** Act as configurable, reusable pieces of the theme that can be assigned to different templates. Sections often serve as containers for snippets and can be configured through the Theme Editor.
4. **Locales:** Manage the text and translations within the theme, controlling how content is displayed in different languages.
5. **Config Files:** (e.g., settings_schema.json, settings_data.json) Define theme settings, such as colors, fonts, and layout options, which are configurable through the Theme Editor. These settings represent the customizable state that is passed to components.

## The Separation in Practice

• **Components (Presentation Layer):** A product-card.liquid snippet is responsible for rendering the product’s image, title, price, and add-to-cart button. It doesn’t need to know where the data comes from; it only needs to be passed a product object to render.

• **State Direction (State Layer):** The `section/main-collection.liquid` section renders the `product-card.liquid` inside of a `item-grid.liquid` snippet. It passes the `collection` object produced by a section setting to the snippet. Global settings, template, and other configuration files might also define others settings like filters, or sort order, otherwise the component falls back to its defaults.

• **State Configuration (State Layer):** The theme can freely define Theme Editor settings (defined in settings_schema.json, and section schemas) to allow non-technical user to configure  of the product cards, such as whether to display the product’s review score on the product card. This setting is part of the state and will be passed down to the product-card.liquid snippet to control whether or not the review score is rendered.


## Benefits of This Separation

1. **Modularity:** By separating presentation and state, components (snippets) can be reused across different contexts without needing to be aware of the broader page structure or data flow. For example, a component can be loaded in isolation and only passed the state it needs to render which enables things like automated component-level testing and component explorer.

2. **Maintainability:** Changes to the presentation layer (e.g., updating the contents of a snippet) can be made independently of changes to the state layer (e.g., modifying which data is passed to a snippet). This separation simplifies both development and maintenance allowing for a shared component library to be developed independently from theme projects.

3. **Customization:** The state layer allows for full control of Shopify Theme Editor experience without the need to alter underlying components. This flexibility makes it easier for theme developers to tailor the customization experience to their specific project.

4. **Scalability:** As the theme grows in complexity, the clear separation between state and presentation ensures that the architecture remains manageable, with well-defined roles for each part of the theme.

## Conclusion

In a Shopify theme, the **presentation layer** is controlled by components (snippets and assets) that render the UI based on the data they receive. The **state layer** is controlled by the theme structure, which includes layouts, templates, sections, and configuration files, determining what data is used and how it is passed to the presentation layer. This separation allows for a clean, modular architecture where components can be developed and managed independently of the broader theme state, leading to more maintainable, scalable, and customizable themes.
